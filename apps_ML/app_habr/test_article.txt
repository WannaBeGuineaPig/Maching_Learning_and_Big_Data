 https://habr.com/ru/companies/aeza/articles/908696/

 Привет Хабр! На связи Аеза и сегодня мы осветим очень злободневную тему – выявление подозрительных активностей в трафике. Мы не будем говорить о каких-то специализированных решениях, типа IDS/IPS, а вместо этого рассмотрим основные принципы выявления подозрительных действий что называется вручную.

 Наша задача будет состоять в том, чтобы самостоятельно, используя только Wireshark проанализировать образцы трафика и выявить в нем подозрительную активность для последующей настройки средств защиты.

 Wireshark можно загрузить c официального ресурса проекта, либо установить с помощью менеджера пакетов.

 HTTPS не проблема
 Шифрование TLS сейчас стало стандартом де факто при передаче трафика по сети. Если в прежние времена в дампе трафика можно было встретить незашифрованный HTTP, то сейчас такое практически невозможно. Большинство веб-сайтов используют защищенный протокол Hypertext Transfer Protocol Secure (HTTPS). Но, как и большинство веб-сайтов, различные типы вредоносного ПО также используют HTTPS. Так нам необходимо понять, что произошло на основе дампа, нужно  получить трафик в расшифрованном виде. Поэтому, для начала нам нужно расшифровать HTTPS.

 Так как мы находимся на стороне защитников, у нас есть административный доступ на все пользовательские машины, и мы можем включить журналирование сессионных ключей в файл. Далее в этой статье мы будем рассматривать ОС Windows, так как она больше всего подвержена атакам вредоносов, по крайней мере среди десктопных систем.

 Для того, чтобы включить журналирование ключей, необходимо перейти в раздел Панель управления → Система и безопасность → Система. На вкладке «Дополнительные параметры системы» нажимаем кнопку «Переменные среды».


 Далее в разделе "Переменные среды" для пользователя необходимо добавить переменную SSLKEYLOGFILE и указать в качестве значения полный путь и имя файла, в котором будут сохраняться ключи.


 В нашем случае ОС Windows 10 Pro 19045.5737 и этот способ сработал. Однако, если у вас не получилось запустить логирование, то в качестве альтернативы можно попробовать воспользоваться Powershell.

  [Environment]::SetEnvironmentVariable("SSLKEYLOGFILE", "c:\Temp\sslkeylog.txt", "User1")

 В Linux для выполнения той же задачи просто выполним:

 export SSLKEYLOGFILE=/путь/к/файлу/sslkeylog.log

 Теперь мы можем смело приступать к сбору трафика, так как с помощью файла журнала ключей мы можем расшифровать HTTPS-активность в pcap и просмотреть ее содержимое.

 Получаем артефакт
 Рассмотрим первый случай: пользователь получил письмо со ссылкой и нажав на эту ссылку загрузил и автоматически выполнил на своей машине вредоносный файл, в результате чего машина была заражена. Нам необходимо получить образец данного вредоноса (артефакт) в изначальном виде, до того, как он был запущен для того, чтобы затем принять защитные меры. Например, если антивирус пропустил этот файл, то передать его в антивирусную компанию для анализа.

 У нас имеется дамп трафика и журнал с ключами. Сначала нам необходимо подгрузить в Wireshark файл с ключами. Для этого выберем Edit → Preferences… → Protocols и в списке укажем TLS.

 Далее необходимо подгрузить файл с журналом ключей:


 Теперь все готово к работе с дампом трафика. После открытия файла мы видим множество различных пакетов. Прежде всего нужно немного настроить Wireshark под наши задачи. В частности, уберем столбцы с МАС адресами отправителя и получателя, так как они нам сейчас не нужны. Для этого выбираем название каждого из ненужных столбцов и далее указываем Remove this Column.


 Также неплохо было бы включить разрешение доменных имен для сетевых адресов. Для этого выберем View → Name resolution → Resolve Network Addresses. Также, при необходимости можно указать нужный формат времени также во вкладке View → Time Display Format.

 Теперь необходимо отфильтровать только те пакеты, которые нас интересуют. Нам нужно найти пакеты с запросами HTTP или рукопожатия TLS так как именно с этих пакетов начинаются сессии. И на всякий случай уберем SSDP (Simple Service Discovery Protocol) пакеты, так как они будут только засорять наш вывод.

 В итоге укажем следующий фильтр:

 (http.request or tls.handshake.type eq 1) and !(ssdp)

 В итоге для моего примера получилась следующая картина:


 Как видно в дампе сайтов не так много и каждый из них можно проверить, например с помощью всем известного ресурса virustotal.com. Например, представленный в дампе ресурс 105711.com некоторые антивирусные вендоры определили, как вредоносный или фишинговый.


 Давайте посмотрим, что было передано во время сессии с этим сайтом. Для этого выберем первый пакет и нажав правую кнопку мыши укажем Follow → TLS Stream.

 Как видно, все оказалось довольно скучно: всего лишь ошибка 502 Bad Gateway.


 Посмотрим следующий ресурс foodsgoodforliver.com. Этот сайт сочло подозрительным даже меньшее число антивирусных вендоров, правда среди них есть Kaspersky, что наводит на некоторые мысли.


 Давайте также посмотрим TLS сессию. Здесь в самом начале мы видим кое-что интересное.


 В первом GET запросе мы запрашиваем файл invest_20.dll и как видно далее, его получаем, так как первые два байта MZ это заголовок PE-формата выполнимых файлов Windows. Ну и всем известное предупреждение про невозможность запуска в режиме DOS! Очевидно, что перед нами выполнимый файл, который пользователь загрузил себе на машину. Давайте извлечем его из дампа.

 Для этого выберем Export Objects → HTTP.


 Сейчас самое время предупредить читателя о том, что эксперименты с подозрительными файлами под Windows лучше всего проводить под Linux, чтобы случайно не запустить опасный файл.

 Далее нажимаем Save и сохраняем интересующий нас файл на диск. После этого его можно: отправить на анализ разработчикам антивируса, отреверсить самостоятельно в песочнице. Для остальных веб ресурсов, представленных в дампе также можно провести подобные проверки, но это легальные сайты и на них нет ничего подозрительного.

 Ищем активность в LDAP
 Разобравшись с простым примером загрузки вредоносного файла, давайте усложним нашу задачу. Теперь нам известен только IP адрес скомпрометированного узла и необходимо узнать что это за узел и как его собственно взломали..

 Итак, нам известен только адрес клиентской машины 10.8.15.133, также известно, что эта машина входит в состав домена Active Directory. И собственно все. Однако, для того, чтобы разобраться в том, что происходило в сети одного адреса как правило бывает недостаточно, поэтому хорошо было бы узнать имя узла и имя пользователя, который на нем работал. Начнем с имени узла.

 Для того, чтобы найти имя зараженного узла можно отфильтровать пакеты NetBios в Wireshark, по адресу 10.8.15.133. Для этого воспользуемся фильтром nbns.


 Как уже было сказано чуть выше, наша машина входит в домен AD. Соответственно для того, чтобы узнать имя пользователя воспользуемся поиском пакетов по протоколу Kerberos.

 Искать будем по фильтру:

 Kerberos.CNameString

 Для удобства можно добавить отдельный столбец в Wireshark, в котором будет отображаться значение CNAME. Для этого выберем один из найденных пакетов, укажем в нем поле Kerberos → Cname → Name и нажав правую кнопку мыши, выберем Apply as Column.


 Теперь мы можем найти имя учетной записи пользователя Windows plucero, связанное с 10.8.15.133. Помимо логина мы можем извлечь из трафика имеющуюся в AD информацию об имени и фамилии данного пользователя.

 Для этого нам потребуется следующий фильтр:

 ldap.AttributeDescription == «givenName»


 Часть нашей задачи мы решили: узнали кто и когда работал с этой машины. Теперь попробуем выяснить каким образом произошла компрометация. Здесь мы воспользуемся уже рассмотренными ранее способами.

 Начнем с экспорта файлов из дампа. Как видно, Wireshark предлагает нам экспортировать большое количество различных данных.


 Проверка на Virustotal показала, что 72.5.43.29 и quote.checkfedexexp.com могут представлять определенную опасность. Мы можем экспортировать zip-архив с сайта quote.checkfedexexp.com и DLL с сайта 72.5.43.29, используя уже знакомый нам путь меню Файл → Экспорт объекта → HTTP....

 Имя zip-архива содержится в заголовках HTTP-ответа, которые можно увидеть, проследив за TCP или HTTP-потоком данного конкретного HTTP GET-запроса.


 Этот zip-архив содержит .js-файл. Если дважды щелкнуть (в песочнице!) по распакованному файлу .js на уязвимом хосте, Windows он будет выполнен с помощью wscript.exe.

 Если мы проследим поток TCP для первого HTTP GET-запроса к 72.5.43.29, мы увидим признаки передачи выполнимого файла, а для того, чтобы определить, является ли это EXE или DLL, воспользуемся командой file из дистрибутива Linux.


 Анализ на VirusTotal для этой DLL показал много интересных срабатываний.


 В результате чего мы можем сделать выводы о том, какое вредоносное ПО использовалось и откуда оно было загружено.

 Тренируемся на кошках
 Для тех читателей, кого заинтересовала тема анализа трафика и выявление вредоносных активностей мы можем предложить для начала рассмотреть тестовые примеры реальных вредоносов, представленные на сайте https://www.malware-traffic-analysis.net/. На этом ресурсе есть образцы трафика, содержащие реальные вредоносы, так что пользоваться этими дампами надо аккуратно. Также на сайте есть инструкции с разбором этих дампов трафика и необходимыми пояснениями. При этом стоит отметить, что на этом веб ресурсе представлены достаточно свежие дампы трафика.

 Также посмотреть дампы трафика можно на https://github.com/thongsia/Public-Pcaps, https://github.com/tatsuiman/malware-traffic-analysis.net. Здесь образцы будут не такие свежие, но зато их довольно много для различных видов вредоносов.

 Подведем итоги
 С помощью анализа дампов сетевого трафика можно получить массу полезной информации об активности вредоносов в сети. Мы можем узнать, когда, с каких ресурсов и каким пользователем был загружен тот или иной вредоносный файл. При этом нам не требуется большое количество инструментов, достаточно анализатора Wireshark и штатных команд операционной системы.

 В этой статье мы подробно рассмотрели использование Wireshark для анализа дампа трафика и выявления в нем подозрительной активности. Надеемся, что этот материал был полезен и интересен для читателя.



































; https://habr.com/ru/articles/420883/

; Эта статья о том, что и сейчас (в 2018 году) маленькая инди команда из трех разработчиков может создать игру, которая выиграет приз в 40 000 евро (~2 800 000 руб.) в рамках национальной государственной поддержки отечественных разработчиков игр [1]. Общий призовой фонд данного конкурса на все номинации составил 560 000 евро. И он существует в Германии вот уже 10 лет, с 2009 года.

; Tinytouchtales in German Games Award 2018

; Tinytouchtales при награждении в German Games Award 2018 [2]

; 0. Цели статьи

; Удовлетворить любопытство — кто получает такие призы? Насколько большой у них должна быть команда, и насколько амбициозным должен быть проект?
; Получить представление о способах развития игровой индустрии, применяемых (в том числе на государственном уровне) в странах, занимающих заметное положение в данной отрасли.
; Чтобы, поглядывая на эти суммы в конкурсе, можно было более обоснованно говорить о серьезности этого не всегда серьезного занятия.
; И даже, быть может, у нас тоже появится что-нибудь подобное официальное с надежной, доверенной системой отбора и судейства. Ведь у нас периодически перенимают западные традиции.

; Здесь я буду анализировать источники этих денежных средств, а также рассматривать, за что такие деньги выдают. И кому.

; Тут, кстати, засветилась и многими любимая Piranha Bytes…

; 1. Откуда деньги?

; Призовой фонд «German Computer Game Award» (GCGA) не всегда был настолько большим. В 2009 году это были скромные 150.000 евро и только к 2018 году он дорос до 560.000 евро [3]. В грубом пересчете на рубли это 39.200.000 руб. Деньги идут от отраслевой «Ассоциации индустрии немецких игр» совместно с «Федеральным министерством транспорта и цифровой инфраструктуры». То есть деньги поступают и от бизнеса, и от государства.

; Вообще-то, еще в довесок к этой сумме идут и 140.000 евро от новостной компании Computec Media Group, которая эти деньги тратит на медийное продвижение победителей некоторых номинаций. Впрочем, организация скромно умалчивает об этом бонусе и во всех пресс релизах фигурирует сумма в 560.000, а не 700.000 [1].

; 2. Какую цель официально преследуют организаторы?

; Цель German Computer Game Award — продвигать Германию как деловое место в области разработки цифровых игр и интерактивного развлекательного программного обеспечения. В частности, акцент делается на инновационные, культурно и педагогически ценные игры, чтобы создать стимул для развития высококачественных, привлекательных компьютерных игр в Германии и тем самым увеличить разнообразие таких игр в Германии.

; 3. Кто может претендовать?

; Принимать участие в конкурсе могут только игры, которые были как минимум на 80% разработаны в Германии. Есть номинации на разные игровые платформы (ПК, браузерные, мобильные), международные и локальные, в поддержку школьников и студентов. Игры должны быть опубликованы в прошлом календарном году или должны быть опубликованы до 30 июня в год награды. Разрешается подавать даже концепты, прототипы и демо-версии игр, если они опубликованы [4].

; 4. Награды и номинации

; Награждение состоялось 10 апреля 2018 года в Мюнхене [1]. Событие это весьма скудно освещалось вне Германии, и даже англоязычная Википедия знает заметно меньше своей немецкой соседки об этом конкурсе.
; Помимо краткого представления игр добавил также и краткую информацию о разработчиках [3].

; 1) Лучшая немецкая игра (110.000 евро + 60.000 медиа-бонус)
; Witch It [5]



; (Разработчик: Barrel Roll Games, Гамбург).

; Если кратко — это мультиплеерные прятки. Окончательная публикация запланирована на конец 2018 года.

; Barrel Roll Games — молодая компания (с 2017 года), состоящая всего из 5-и человек [6]. Правда их игра разрабатывается с издателем Daedalic Entertainment, поэтому это уже не инди с маленькой буквы (но это уже сильно от вкуса зависит).

; 2) Лучшая детская игра (75 000 евро + 40 000 медиа-бонус)
; Monkey Swag [7]



; (Разработчик: Tiny Crocodile Studios/kunst-stoff, Берлин.

; Monkey Swag — это детская игра с решением головоломок, в основном геометрических.
; Дебютный проект был разработан еще одной молодой компанией (с 2017 года), чей состав примерно 5 человек. Тут тоже не обошлось без продюсера: United Soft Media. [7].

; Мне удалось связаться с одним из владельцев студии: Johanna Janiszewski (CEO and Creative Director). Возможно, ей удастся зайти сюда и ответить на некоторые вопросы сообщества в комментариях, если таковые будут.

; На мои вопросы о том, сколько у них было конкурентов, сколько всего было участников и были ли какие-либо бюрократические сложности, Johanna ответила:
; We had two more competitors on the best kid's game. I don't have any insights into the nomination process as well. Registration was fairly easy, we had to send a brief overview of the game, a trailer and a playable version of course. So for me it was like: ok, we applied, hey cool, we got nominated, let's go to the event, oh my gosh, we won! We have to call everyone and tell them. There was lots of answering emails, interviews and paperwork afterwards. We even got into one, two tv news here in germany.

; Перевод ответа

; 3) Лучшая молодежная игра (75 000 евро + 40 000 медиа-бонус)
; Witch It [5]
; Это вторая номинация у игры.

; 4) Лучшая серьезная игра (40 000 евро)
; Vocabicar [8]



; (Разработчик: Quantumfrog, Ольденбург).

; Это детская игра для изучения английского языка.

; Компания-разработчик уже не новичок с 7-и летним опытом и составом команды в 17 человек [9].

; 5) Лучшая мобильная игра (40 000 евро)
; Card Thief [10]



; (Разработчик: Арнольд Рауэрс / Tinytouchtales, Берлин).

; Это логическая «карточная» игра для мобильных устройств. Очень стильная графика и анимации. Именно из-за нее и было решено сделать этот обзор.

; Вообще эту игру разрабатывали 3 человека, о чем сами авторы и пишут у себя на сайте студии Tinytouchtales. Их игра также выиграла в номинации «Лучший игровой дизайн» в конкурсе German Developer Awards 2017 [2]. Вот, что разработчики пишут о жюри конкурса в своём блоге:
; The Jury in the German Developer Awards is a mix of professionals, hobbyist and people (mostly politicians) who never play games, so winning the award for Card Thief was difficulty from our perspective.

; Перевод

; Кстати, отдельное спасибо Арнольду, который предоставил мне по просьбе ссылки на публикации на немецком, т.к. на английском языке событие освещалось очень скудно (я найти подробности не смог).

; 6) Лучший дизайн игры (40 000 евро)
; TownsmenVR [11]

; (Разработчик: Handy Games, Гибельштадт) [12]
; TownsmenVR — это симулятор бога по созданию и развитию своего города с видом из VR глаз и управлением карающей дланью. Есть у них и просто Townsmen без VR, похожая на обычную построиловку города с паузами на действия. То есть стандартный, добротно сделанный выкачиватель деньзнаков из подсевших пользователей, в основном на мобильных устройствах. Мною воспринимается как сильно усовершенствованная «ферма». Насколько они похожи друг на друга — не знаю, может быть кто-то уточнит это вопрос в комментариях.

; Handy Games — Опытный разработчник очень большого числа игр, в основном мобильных, но есть и ПК игры с VR. Команда состоит из примерно 50 человек.

; 7) Лучшие инновации (40 000 евро)
; HUXLEY [13]



; (Разработчик: Exit Adventures, Берлин) [13]
; HUXLEY — виртуальная мультиплеерная квест-комната с общей задачей «Найти выход».
; Разработчики — молодая команда из 15 человек (судя по выложенным ими фотографиям, работают они в офисе, оформленном под заброшенное складское помещение).

; 8) Лучшая постановка (40 000 евро)
; The Long Journey Home [14]



; (Разработчик: Daedalic Entertainment, Дюссельдорф) [15]
; The Long Journey Home — в процедурногенерируемом мире команда затерянных в космосе путешественников ищет дорогу домой, решая попутно квесты встречающихся инопланетян.
; Daedalic — это довольно известное издательство/разработчик, много где светится с 2007 года c 80-ю сотрудниками. В их копилке в качестве издателей еще есть сравнительно известные игры: Machinarium; Tales of Monkey Island; Shadow Tactics: Blades of the Shogun; Witch It (та, что здесь всех победила). Как разработчиков: The Pillars of the Earth; State of Mind.

; Так вот, если посмотреть, то многие игры-победители в этом конкурсе тесно завязаны с этим издателем. Похоже они то точно знают, что нужно для побед в подобном мероприятии, и именно таких компетенций среднестатистический разработчик желает от своего издателя.

; 9) Лучшая международная игра (тут денег не дали)
; Assassin's Creed Origins [16]



; (Разработчик: Ubisoft).

; Ну а про этого гиганта в сфере игровой разработки итак все знают. На конкурс прошли благодаря большому филиалу в Германии, хотя и считается французской фирмой.

; 10) Лучший международный игровой мир (тут денег не дали)
; Horizon Zero Dawn [17]



; (Разработчик: Guerrilla Games / Sony Interactive Germany) [17].

; Horizon Zero Dawn — экшн РПГ с открытым миром, где киборги (роботы) всё уже давным давно заполонили. Впрочем, главной героини все опасности нестрашны, ведь у неё есть её верный лук и стрелы.

; Компания работает с 2000 года и насчитывает около 270 работников. Сейчас работает под крылом Sony Computer Entertainment.

; 11) Лучшая международная многопользовательская игра (тут денег не дали)
; Witch It [5]
; А это 3-я номинация у одной и той же игры.

; 12) Награда молодых талантов за концепцию (фонд 50 000 евро)
; 12.1) Ernas Unheil (1-е место и 35 000 евро) [18]



; Айлин Ауэрбах, Джессика Бодамер, Лиза Форш, Ольга Тринова, Талея Сикманн / HTW Берлин
; Ernas Unheil — это интерактивная книга, которая помимо стандартного для этого жанра дерева решений, использует акселерометр в андроид устройствах (и, похоже, дополнительно требует физическую книгу). Игра разрабатывалась в рамках студенческого проекта группой из 4-х студентов и 2-х кураторов.

; 12.2) Sunset Devils (2-е место и 15 000 евро) [19]



; Андреас Илленсер / Школа Карла Хофера, Карлсруэ

; Sunset Devils — школьный проект одного автора. Стиль игры — пиксельарт в жанре спагетти вестерна [20]. Судя по скриншотам — стрелялка/бродилка, а судя по скорости разработки и периодической перерисовки уже нарисованных моделей — долгострой c 2012 года со значительным риском вечной альфа версии или даже концепта. Хотя может проект и будет доделан после окончания автором школы, как он и планирует.

; 13) Награда молодого таланта за прототип (фонд 50 000 евро)
; 13.1) Fading Skies (1-е место и 35 000 евро) [21]



; Marc Fleps / HAW Hamburg

; Fading Skies — это 3D платформер от соло разработчика. Основной упор в игре делается на масштабные пейзажи и перелётные приключения. Обещается еще продуманный интерактивный сценарий.

; 13.2) Realm of the Machines (2-е место и 15 000 евро) [22]



; Джулиан Людвиг, Себастьян Янтке, Стефан Хелд, Вануша Нурбахш, Алина фон Петерсдорф, Шарон Шваб, Максимилиан Мишалок, Дэвид Эрнст, Паскаль Маршар / Mediadesign University Munich
; Realm of the Machines — 2D пазл, где главному герою-роботу требуется возвращать механизмы к жизни, прикрепляя к ним шестеренки и конвейерные полосы.

; Это учебный проект на 6-ой семестр в университете Медиадизайна [22].

; 14) Приз зрительских симпатий (тут денег не дали)
; ELEX [23]



; (Разработчик: Piranha Bytes, Эссен).

; ELEX — это Готика/Risen в постапокалипсисе. Пираньи, как всегда, создали вручную проработанный мир.

; Пираньи — очень опытная (и многими любимая) компания, работающая с 1997 года. Штат компании — 30 человек.

; Jennifer Pankratz из Piranha Bytes ответила на мою просьбу о дополнительной информации и скинула ссылку на видео мероприятия, где они благодарят зрителей за голосование:

; Видео от Piranha Bytes

; Кстати, в прошлые годы в этой номинации побеждали следующие игры [3]:
; — 2017, The Witcher 3: Wild Hunt – Blood and Wine
; — 2016, The Witcher 3: Wild Hunt
; — 2015, Dark Souls II

; 15) Специальный приз жюри (тут денег не дали)
; Friendly Fire [24]



; Это проект, связанный с благотворительными игровыми стримами на ютубе (и других площадках). [24]

; 5. Заключение

; Вот так ежегодно награждают разработчиков игр в Германии. Участники получают официальное признание, внимание СМИ (пусть чаще национального характера). Студенты получают хорошие бонусы в своё резюме. Некрупные разработчики шанс хорошо подзаработать и засветиться. Индустрия за счет такого пиара получит больше новой крови. Похоже всем от этого хорошо.
; Я пригласил в обсуждение статьи некоторых авторов игр, и некоторые изъявили желание немного пообщаться. Возможно, кто-то все же доберется до комментариев и мы сможем получить немного больше «инсайдерской» информации.

; Может быть в ваших странах тоже есть подобные конкурсы национального уровня. Было бы очень любопытно узнать об условиях их проведения, выделяемых бюджетов и информационной поддержки.

; P.S. Должен заметить, что из-за сложностей перевода с немецкого в статью закралась ошибка. Johanna в комментариях к статье помогла её выявить. Дополнительные финансовые призы по факту не были призами и не использовать «для рекламы в СМИ». Это были средства Medienboard, которые являются целевым финансированием/грантами на выполнение конкретного будущего проекта, имеющего заявленную значимость (в образовании, например) и качество. То есть в итоге по этим бонусам победители должны будут предъявить реализованную игру.





















































; https://habr.com/ru/articles/908666/

; Представьте ИИ-агента в виртуальном мире: он не знает ни прошлого, ни будущего, ему доступен лишь крошечный фрагмент окружения. И все же, шаг за шагом, этот агент начинает «чувствовать» свое положение, выстраивать внутренние карты и даже формировать зачатки собственного «я». В этой статье вы узнаете, почему за кулисами обучения RL-агента скрывается удивительный процесс создания его внутренней картины мира.

; Недавно наткнулся на интересную статью "Probing for Consciousness in Machines" (Исследование сознания в машинах). Расскажу простыми словами о чем она.

; Введение: от Тьюринга до Дамасио
; Еще в середине XX века Алан Тьюринг предложил свой знаменитый тест: если человек в чате не отличит собеседника-машину от реального человека, то машину можно считать “разумной”. Но затем Джон Серл поставил вопрос иначе. Он предложил мысленный эксперимент “Китайская комната”: представьте, что в помещении сидит человек, который ни слова не знает по-китайски, зато у него есть гигантская книга правил. Из нее он берет инструкции: “если получил символ X — выдай символ Y”. Человек выдает правильные ответы по-китайски, но при этом совершенно не понимает смысла сказанного. Вывод: симуляция понимания — это не то же самое, что реальное понимание.

; Современные ученые описывают сознание иначе.

; Теория интегрированной информации (IIT) считает, что сознание рождается там, где система максимально “сплетает” в единое целое всю доступную информацию.

; Теория глобального рабочего пространства (GWT) видит сознание как соревнование разных модулей (например, памяти, распознавания образов, планирования), которые пытаются попасть в “рабочую память” и поделиться своей информацией со всеми остальными.

; Но есть и третья, более биологичная модель — у нейробиолога Антонио Дамасио. Он выделил три уровня:


; Прото-самость (protoself) — чисто телесное представление (уровень сахара в крови, температура тела), о котором мы не задумываемся сознательно.

; Основное сознание (core consciousness) — когда эти телесные ощущения объединяются с восприятием внешнего мира, появляется простое “я здесь и сейчас”.

; Расширенное сознание (extended consciousness) — это уже автобиографическое “я”: память о прошлом, планы на будущее, языковые конструкции.

; Ключевые моменты модели Дамасио — это эмоции (изменения во внутреннем состоянии организма) и чувства (их нейронные эквиваленты). По идее, если мы сможем повторить такой механизм хотя бы на примитивном уровне в машине, у нас появятся первые признаки “машинного сознания”.

; Зачем это нужно и какие вопросы ставят ученые
; Авторы исследования задали себе четыре главные задачи:

; Проверить, может ли RL-агент (т. е. агент, обучающийся с подкреплением) в виртуальной среде сам сформировать “модель мира” и “модель себя”, которые по Дамасио соответствуют основному сознанию.

; Разработать метод «зондирования» (probing): обучать простые классификаторы (probes) на внутренних активациях нейросети, чтобы угадывать, где находится агент в игровом поле.

; Оценить: действительно ли скрытые представления сети содержат информацию о координатах агента и, возможно, о его “внутренних состояниях”.

; Предложить, как дальше отделить “модель мира” от “модели себя” — например, введя в качестве входов данные о “здоровье”, “энергии” или “опыте”.

; Главная научная гипотеза: когда агент оптимизируется для навигации и решения задач, у него как побочный эффект появляется внутреннее представление мира и “я”. Это может быть первым шагом к тому, что мы назовём “предъядерным” сознанием.

; Как все устроено
; 1. Агент обучается с помощью обучения с подкреплением (RL); 2. Сохраняются данные о позициях агента и активациях нейросети; 3. На основе активаций каждого слоя обучаются классификаторы (probes), предсказывающие истинную позицию; 4. Если хотя бы одна модель предсказывает позицию лучше случайного угадывания, значит, активации содержат нужную информацию — агент выработал модель мира
; 1. Агент обучается с помощью обучения с подкреплением (RL); 2. Сохраняются данные о позициях агента и активациях нейросети; 3. На основе активаций каждого слоя обучаются классификаторы (probes), предсказывающие истинную позицию; 4. Если хотя бы одна модель предсказывает позицию лучше случайного угадывания, значит, активации содержат нужную информацию — агент выработал модель мира
; 1. Игровые карты
; Исследователи выбрали четыре простые, но разнообразные карты (каждая 15×15 клеток):

; Random — просто пустая комната, старт и финиш в случайных точках.

; Monsters — та же комната плюс три случайных монстра.

; Trap — как и случайная, но 15 невидимых ловушек, которые телепортируют агента.

; Ultimate — Монстры + ловушки, да еще и затемненный фон, чтобы видно было только 3×3 вокруг агента.

; За каждый шаг агент получает − 0.001 очка, а за выход из комнаты — +1. Эпизод длиной до 300 шагов.

; Маленькая фигура — это агент. Лестницы вверх и вниз — начальная и целевая точки соответственно. Глаза обозначают обнаруженные телепортационные ловушки, кости — останки побежденного монстра. Темно-серые области — уже посещенные агентом места, а светло-серый участок 3×3 вокруг агента — только что открытая зона
; Маленькая фигура — это агент. Лестницы вверх и вниз — начальная и целевая точки соответственно. Глаза обозначают обнаруженные телепортационные ловушки, кости — останки побежденного монстра. Темно-серые области — уже посещенные агентом места, а светло-серый участок 3×3 вокруг агента — только что открытая зона
; 2. Архитектура RL-агента
; Карта использовалась в качестве входных данных только в первом эксперименте. LSTM была добавлена в архитектуру, начиная со второго эксперимента.
; Карта использовалась в качестве входных данных только в первом эксперименте. LSTM была добавлена в архитектуру, начиная со второго эксперимента.
; На входе либо вся карта (в первом эксперименте), либо обрезанная размером 9×9, 5×5 или даже 3×3.

; Сеть: эмбеддинги, пять сверточных слоев (Conv2D) с 16 фильтрами 3×3, в последнем слое — 8 фильтров. Потом два полносвязных слоя по 256 нейронов, а начиная со второго эксперимента — ещё и LSTM с 512 ячейками.

; Две «головы»: одна решает, какое действие выбрать (policy), другая — оценивает ценность состояния (value).

; Обучение шло по алгоритму PPO из библиотеки RLlib, пока агент не переставал улучшаться на каждой из карт.

; 3. Сбор данных для классификаторов
; Во время игры снимали активации выбранных слоев (или состояния LSTM) вместе с “истинными” координатами X и Y. На каждую версию агента набрали по 230 000 образцов: 200 000 штук отправили на обучение классификаторов, 30 000 — на тест.

; 4. Типы классификаторов
; Линейные: один полносвязный слой.

; Нелинейные: три слоя с активацией ReLU.

; В первом эксперименте их ставили только на сверточные и полносвязные слои. Во втором и третьем — на скрытое (hidden) и ячейковое (cell) состояния LSTM.

; Обучали Adam-ом, метрика — точность (accuracy): доля правильных предсказаний и X, и Y одновременно.

; Что получилось в экспериментах
; Эксперимент 1: без памяти
; Шанс случайного угадывания: ≈ 6,7 %.

; На Ultimate карте линейные классификаторы давали до 34,5 %.

; На Trap — 8,7–8,9 % (в 1,3–1,4 раза лучше, чем случайно).

; Полносвязные слои хуже сверточных (25,3–29,7 % на Ultimate).

; Итог: даже без LSTM сеть хранит в своих слоях достаточно сведений о том, где находится агент — хоть часть этой информации прямо видна на экране.

; Эксперимент 2: добавляем LSTM и обзор 5×5
; Шанс случайного угадывания: ≈ 9,1 %.

; Линейные классификаторы:

; Hidden: 26,0 % (Random), 58,8 % (Monster), 40,8 % (Trap), 25,1 % (Ultimate).

; Cell: 29,9 % / 62,6 % / 42,8 % / 26,4 %.

; Нелинейные классификаторы:

; Hidden: 31,1 % / 64,1 % / 44,4 % / 27,7 %.

; Cell: 37,3 % / 67,4 % / 47,2 % / 30,5 %.

; Когда обзор узкий (5×5), без памяти не обойтись: LSTM явно кодирует, где агент был и где он есть сейчас. На карте с монстрами точность доходит до 67,4 % — это почти в семь раз выше случайного уровня.

; Эксперимент 3: обзор еще меньше — 3×3
; Шанс случайного угадывания: ≈ 7,7 %.

; Линейные классификаторы:

; Hidden: 54,8 % (Random), 49,3 % (Monster), 34,0 % (Trap), 27,8 % (Ultimate).

; Cell: 57,4 % / 50,8 % / 33,9 % / 28,8 %.

; Нелинейные классификаторы:

; Hidden: 58,5 % / 53,5 % / 35,4 % / 29,0 %.

; Cell: 59,7 % / 54,8 % / 36,2 % / 30,3 %.

; Даже когда агент видит лишь 3×3 клеток, внутри LSTM остается очень точная карта его положения — в 8 раз выше случайного результата на самой простой карте.

; Итого
; Информация о положении появляется на каждом уровне сети, но сильнее всего — в LSTM hidden и cell.

; Чем меньше обзор, тем важнее внутренняя память.

; Наличие монстров и ловушек делает паттерны более “запоминающимися” и повышает точность классификаторов.

; Нелинейные классификаторы обычно работают лучше линейных, что говорит о сложных представлениях в сети.

; Почему это важно и что дальше
; Эта работа показывает, что RL-агент способен спонтанно создать модель мира внутри себя — первый кирпичик к сознанию по Дамасио. Метод классификаторов (probes) из Explainable AI открывает новые пути изучения “понимания” ИИ.

; Но наличие внутренней модели мира не значит, что агент “чувствует” или “сознает” как человек. Однако агенты с такими моделями могут найти неожиданные, нежелательные стратегии. По мере развития таких систем понадобится четкая нормативная база, чтобы отделять безопасные внутренние модели от опасных.